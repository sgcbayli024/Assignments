{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sgcbayli024/Assignments/blob/main/Conor_Bayliss_assignment_3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install quantecon"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sl8vIl8JBus9",
        "outputId": "300cf317-fa70-4535-c57f-3f89d070fa11"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting quantecon\n",
            "  Downloading quantecon-0.7.1-py3-none-any.whl (214 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m214.8/214.8 kB\u001b[0m \u001b[31m3.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numba>=0.49.0 in /usr/local/lib/python3.10/dist-packages (from quantecon) (0.56.4)\n",
            "Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from quantecon) (1.23.5)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from quantecon) (2.31.0)\n",
            "Requirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from quantecon) (1.11.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from quantecon) (1.12)\n",
            "Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.49.0->quantecon) (0.39.1)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from numba>=0.49.0->quantecon) (67.7.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->quantecon) (3.2.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->quantecon) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->quantecon) (2.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->quantecon) (2023.7.22)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->quantecon) (1.3.0)\n",
            "Installing collected packages: quantecon\n",
            "Successfully installed quantecon-0.7.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ModcCsWQ881R"
      },
      "source": [
        "import quantecon as qe\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import cm\n",
        "from collections import namedtuple\n",
        "import jax\n",
        "import jax.numpy as jnp\n"
      ],
      "outputs": [],
      "execution_count": 2
    },
    {
      "cell_type": "code",
      "source": [
        "# Use 64 bit floats with JAX in order to increase precision.\n",
        "\n",
        "jax.config.update(\"jax_enable_x64\", True)"
      ],
      "metadata": {
        "id": "AZtLeKKqApKr"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## == Solvers == ##\n",
        "\n",
        "\n",
        "default_tolerance = 1e-9\n",
        "default_max_iter = int(1e6)\n",
        "\n",
        "def successive_approx(f,\n",
        "                      x_init,\n",
        "                      tol=default_tolerance,\n",
        "                      max_iter=default_max_iter,\n",
        "                      verbose=True,\n",
        "                      print_skip=1000):\n",
        "\n",
        "    \"Uses successive approximation on f.\"\n",
        "\n",
        "    if verbose:\n",
        "        print(\"Beginning iteration\\n\\n\")\n",
        "\n",
        "    current_iter = 0\n",
        "    x = x_init\n",
        "    error = tol + 1\n",
        "    while error > tol and current_iter < max_iter:\n",
        "        x_new = f(x)\n",
        "        error = jnp.max(jnp.abs(x_new - x))\n",
        "        if verbose and current_iter % print_skip == 0:\n",
        "            print(\"iter = {}, error = {}\".format(current_iter, error))\n",
        "        current_iter += 1\n",
        "        x = x_new\n",
        "\n",
        "    if current_iter == max_iter:\n",
        "        print(f\"Warning: Hit maximum iteration number {max_iter}\")\n",
        "    else:\n",
        "        if verbose:\n",
        "            print(f\"Iteration converged after {current_iter} iterations\")\n",
        "\n",
        "    return x\n"
      ],
      "metadata": {
        "id": "cb0rSCgeAsht"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def newton_solver(f,\n",
        "                  x_init,\n",
        "                  tol=default_tolerance,\n",
        "                  max_iter=default_max_iter,\n",
        "                  verbose=True,\n",
        "                  bicgstab_atol=1e-6,\n",
        "                  print_skip=1):\n",
        "    \"\"\"\n",
        "    Apply Newton's algorithm to find a fixed point of f.\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    # We use a root-finding operation on g(x) = f(x) - x.\n",
        "    g = lambda x: f(x) - x\n",
        "\n",
        "    # If g(x) = 0 then we have found a fixed point.\n",
        "    #\n",
        "    # Thus we need to iterate with the map\n",
        "    #\n",
        "    #    Q(x) = x - J_g(x)^{-1} g(x)\n",
        "    #\n",
        "\n",
        "    @jax.jit\n",
        "    def Q(x):\n",
        "        # First we define J_g(x) as an operator.  In particular, we\n",
        "        # define the map v -> J_g(x) v\n",
        "        jac_x_prod = lambda v: jax.jvp(g, (x,), (v,))[1]\n",
        "        # Next we compute b = J(x)^{-1} g(x) using an iterative algorithm\n",
        "        b = jax.scipy.sparse.linalg.bicgstab(\n",
        "                jac_x_prod, g(x),\n",
        "                atol=bicgstab_atol)[0]\n",
        "        # Finally we return x - b\n",
        "        return x - b\n",
        "\n",
        "    return successive_approx(Q, x_init, tol, max_iter, verbose, print_skip)"
      ],
      "metadata": {
        "id": "gvxJGX-bAxfR"
      },
      "execution_count": 190,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## == Model == ##\n",
        "\n",
        "\n",
        "SVModel = namedtuple('SVModel',\n",
        "                        ('P', 'h_grid',\n",
        "                         'Q', 'z_grid',\n",
        "                         'β', 'γ', 'ψ', 'bar_σ', 'μ_c'))\n",
        "\n",
        "def create_sv_model(β=0.99,        # discount factor\n",
        "                    γ=8.89,\n",
        "                    ψ=1.97,\n",
        "                    bar_σ=0.5,     # volatility scaling parameter\n",
        "                    μ_c=0.001,     # mean growth of consumtion\n",
        "                    n_h=12,        # size of state space for h\n",
        "                    ρ_c=0.9,       # persistence parameter for h\n",
        "                    σ_c=0.01,      # volatility parameter for h\n",
        "                    n_z=60,        # size of state space for z\n",
        "                    ρ_z=0.95,      # persistence parameter for z\n",
        "                    σ_z=0.01):     # persistence parameter for z\n",
        "\n",
        "    mc = qe.tauchen(n_h, ρ_c, σ_c)\n",
        "    h_grid = mc.state_values\n",
        "    P = mc.P\n",
        "\n",
        "    mc = qe.tauchen(n_z, ρ_z, σ_z)\n",
        "    z_grid = mc.state_values\n",
        "    Q = mc.P\n",
        "\n",
        "    return SVModel(P=P, h_grid=h_grid,\n",
        "                   Q=Q, z_grid=z_grid,\n",
        "                   β=β, γ=γ, ψ=ψ, bar_σ=bar_σ, μ_c=μ_c)"
      ],
      "metadata": {
        "id": "LZOYwyegA5Gq"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute Tw = 1 + β * Kwθ**(1/θ)\n",
        "\n",
        "def T(w, sv_model, shapes):\n",
        "    \"\"\"\n",
        "    Implement the operator T via JAX.\n",
        "\n",
        "    T takes an array w of shape (n_h, n_z) and returns a new\n",
        "    array of the same shape.\n",
        "\n",
        "    \"\"\"\n",
        "    # Set up\n",
        "    P, h_grid, Q, z_grid, β, γ, ψ, bar_σ, μ_c = sv_model\n",
        "    n_h, n_z = shapes\n",
        "    θ = (1 - γ) / (1 - 1/ψ)\n",
        "\n",
        "    # Put your code here\n",
        "    I, J = len(h_grid), len(z_grid)\n",
        "    N = I * J\n",
        "    # Reshape and broadcast over (i, j, i', j')\n",
        "    h = jnp.reshape(h_grid,        (I, 1, 1, 1))\n",
        "    z = jnp.reshape(z_grid,       (1, J, 1, 1))\n",
        "    P = jnp.reshape(P,            (I, 1, I,  1))\n",
        "    Q = jnp.reshape(Q,            (1, J,  1,  J))\n",
        "    # Compute A and then reshape to create a matrix\n",
        "    a = (1 - γ) * μ_c\n",
        "    #l = bar_σ**2 * ((jnp.exp(2*h) * (1-γ)**2) / 2)\n",
        "    #κ = jnp.exp(a + (1-γ)*z + l)\n",
        "    l = bar_σ**2 * (jnp.exp(2*h) / 2)\n",
        "    κ = jnp.exp(a + z + l)\n",
        "    K = κ * P * Q * w**θ\n",
        "    Kwθ = jnp.sum(K, axis=(2,3))\n",
        "    Tw=1+β*Kwθ**(1/θ)\n",
        "    return Tw"
      ],
      "metadata": {
        "id": "qn4RGP7QA55D"
      },
      "execution_count": 255,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## == Solution and plots == ##\n",
        "T = jax.jit(T, static_argnums=(2, ))"
      ],
      "metadata": {
        "id": "4wrOv-FJF7az"
      },
      "execution_count": 256,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sv_model = create_sv_model()\n",
        "P, h_grid, Q, z_grid, β, γ, ψ, bar_σ, μ_c = sv_model\n",
        "shapes = len(h_grid), len(z_grid)\n",
        "w_init = jnp.ones(shapes)\n"
      ],
      "metadata": {
        "id": "Uhq3bkICF7zW"
      },
      "execution_count": 257,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "qe.tic()\n",
        "w_successive = successive_approx(lambda w: T(w, sv_model, shapes), w_init)\n",
        "successive_approx_time = qe.toc()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ih4tHJ8nF9gK",
        "outputId": "640f3848-6eb0-4817-b2ee-87369cbc69b4"
      },
      "execution_count": 258,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Beginning iteration\n",
            "\n",
            "\n",
            "iter = 0, error = 0.9896936925626487\n",
            "iter = 1000, error = 1.0884050993809069e-08\n",
            "Iteration converged after 1131 iterations\n",
            "TOC: Elapsed: 0:00:1.18\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "qe.tic()\n",
        "w_newton = newton_solver(lambda w: T(w, sv_model, shapes), w_init)\n",
        "newton_time = qe.toc()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "It7i4QvXPCeB",
        "outputId": "f2dc6416-92e0-49d7-8640-37c90f36b8f1"
      },
      "execution_count": 259,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Beginning iteration\n",
            "\n",
            "\n",
            "iter = 0, error = 62.86555291458344\n",
            "iter = 1, error = 2.4762169234829017\n",
            "iter = 2, error = 0.003852819718517253\n",
            "iter = 3, error = 0.0\n",
            "Iteration converged after 4 iterations\n",
            "TOC: Elapsed: 0:00:0.53\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "error = jnp.max(jnp.abs(w_successive - w_newton))\n",
        "relative_time = newton_time / successive_approx_time"
      ],
      "metadata": {
        "id": "uHhvsZ2bF_2b"
      },
      "execution_count": 260,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Max absolute error = {error}\")\n",
        "print(f\"Newton time / successive approx time = {relative_time}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aEkYp6YuGBHQ",
        "outputId": "4e19ff4c-8167-401b-a805-5739ff7822a9"
      },
      "execution_count": 261,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Max absolute error = 5.627058143886643e-07\n",
            "Newton time / successive approx time = 0.4562453199264979\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots()\n",
        "cs = ax.contourf(h_grid,\n",
        "                 z_grid,\n",
        "                 w_newton.T,\n",
        "                 cmap=cm.viridis,\n",
        "                 alpha=0.6)\n",
        "ax.set_xlabel('$h$', fontsize=12)\n",
        "ax.set_ylabel('$z$', fontsize=12)\n",
        "cbar = fig.colorbar(cs)\n",
        "ax.set_title('wealth-consumption ratio')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "LtTG27IQBA1_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "outputId": "19cef9c4-b160-4cbc-f3b2-17d62892f5ee"
      },
      "execution_count": 262,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cK_0TuYfhKoF"
      },
      "execution_count": 262,
      "outputs": []
    }
  ],
  "metadata": {
    "anaconda-cloud": {},
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.1"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}